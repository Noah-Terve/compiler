
/*** Database ***/
template @l T @r 
struct database { 
    list @l T @r data_list; 
    int numElements; 
}

/*** Database Functions ***/
template @l T @r 
int insertFront(list @l T @r aList, T aElement){
    list @l T @r updated = list_insert list @l T @r(aList, 0, aElement);

    return 0 ;
}

template @l T @r 
int insertBack(list @l T @r aList, T aElement){
    int length = list @l T @r list_length(aList);
    list @l T @r updatedList = list_insert @l T @r (aList, 0, aElement);

    return 0;
}

template @l T @r 
int deleteFront(list @l T @r aList, T aElement){
    int length = list @l T @r list_length(aList);
    list @l T @r updatedList = list_insert @l T @r(aList, 0, aElement);

    return 0;
}

template @l T @r 
int deleteBack(list @l T @r aList, T aElement){
    int length = list @l T @r list_length(aList);
    list @l T @r updatedList = list_insert @l T @r(aList, 0, aElement);
    return 0;
}

/**** Untemplated type specific functions ***/
int sortByLastName(list@l Student_data @r aList){
    int num_students = list_length l@ Student_data @r (aList); 
    int i = 0; 
    int j = 0;
    bool swapped = false;

    for (int i = 0; i < num_students - 1; i += 1){
        swapped = false; 
        for (int j = 0; j < n - i - 1; j += 1) {
            student currStudent = list_at (list @l student @r ) (j); 
            student nextStudent = list_at (list @l student @r ) (j + 1); 
            if (currStudent.lastName > nextStudent.lastName){
                list @l Student_data @r newList = list_insert @l Student_data @r (aList, j, nextStudent);
                list @l Student_data @r newList = list_insert @l Student_data @r (newList, j + 1, currStudent);
                swapped = true;
            }
            if ( ! swapped ){
                break;
            }
        }
    }

    return 0;
}


int print_studentList ( list @l Student_data @r aList){
    int numStudents = list_length @l Student_data @r (aList); 

    for (int i = 0; i < numStudents; i += 1){
        Student_data currStudent = list_at @l Student_data @r (aList);

        /* User id */
        print l@ string @r ( "{ user id: "); 
        print l@ int @r (currStudent.studentId); 
        println l@ string @r (", "); 

        /* First name */ 
        print l@ string @r ("First name: ");
        print l@ string @r (currStudent.firstName); 
        /* Last name */ 
        print l@ string @r ("Last name: ");
        print l@ string @r (currStudent.lastName);
        println l@ string @r ("}");
    }
}

struct Student_data { 
    int studentId; 
    string firstName; 
    string lastName; 
}


Student_data database; 
list @l Student_data @r database.student_list = [];

/** Inserting Students **/ 
list @l Student_data @r updatedList = insertBack(student_list, # 3, "Song", "Hyun-min" # ); 
list @l Student_data @r updatedList = insertBack(updated_list, # 3, "Kane", "Harry" # ); 
list @l Student_data @r updatedList = insertBack(updated_list, # 3, "Tomiyasu", "Hiro" # ); 
list @l Student_data @r updatedList = insertBack(updated_list, # 3, "Alba", "Danny" # ); 


print_studentList(database.student_list);


/*
/** Sort list **/ 
list @l Student_data @r sortedList = sortByLastName list l@ Student_data @r (updatedList);

/** Deleting Students **/ 
int num_students = list_length @l Student_data @r (database.data_list)

/*
while ( num_students > 0 ){
    list @l Student_data @r updatedList = deleteBack ( @l list @l Student_data @r @r);
}
*/

*/

















